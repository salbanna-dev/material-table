1. TLS/SSL Protocol Mismatch

Node.js 20 may not support older versions of TLS (like TLSv1.0 or TLSv1.1). If the Okta endpoint is trying to use an older version, this can lead to the EPROTO error.

Solution:
Force Node.js to use TLSv1.2 or higher by specifying it in the request options:
const https = require('https');

const options = {
  hostname: 'your-okta-endpoint',
  port: 443,
  path: '/login',
  method: 'GET',
  minVersion: 'TLSv1.2',  // Enforces TLSv1.2 or higher
};

const req = https.request(options, (res) => {
  // handle response
});

req.on('error', (e) => {
  console.error(`Problem with request: ${e.message}`);
});

req.end();
Solution:
To temporarily bypass this, set NODE_TLS_REJECT_UNAUTHORIZED to 0. This is not recommended for production environments but can help identify if the issue is related to certificate verification:

Self-Signed Certificates or Untrusted CA

If your OpenShift environment or the Okta environment uses self-signed certificates or certificates from an untrusted CA, Node.js might reject them by default.
NODE_TLS_REJECT_UNAUTHORIZED=0 node your_app.js

3. Outdated or Weak Ciphers
Node.js 20 enforces stricter cipher suites. If the Okta endpoint is using weak or deprecated ciphers, the connection might fail with EPROTO.

Solution:
Try specifying stronger ciphers in your HTTPS request:
const https = require('https');

const options = {
  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256',  // Stronger ciphers
  minVersion: 'TLSv1.2'
};

const req = https.request('https://your-okta-endpoint', options, (res) => {
  // handle response
});

req.on('error', (e) => {
  console.error(e);
});

req.end();





Proxy or Firewall in OpenShift



If you’re running this in an OpenShift environment, ensure that your Okta connection isn’t being blocked by a proxy or firewall that enforces older TLS versions or certificates.

Solution:
Check OpenShift network policies and configurations to ensure they allow outbound connections to Okta and are not downgrading the TLS protocol.




The EPROTO error typically results from a mismatch in the TLS version, an unsupported cipher, or issues with certificates. By adjusting the TLS settings or certificates in your Node.js code, you should be able to resolve the issue. If the problem persists, double-check OpenShift’s network configurations and ensure that Okta’s endpoints are accessible and compatible with your Node.js version.






Error  [JwtParseError: Error while resolving signing key for kid "fF4Y61fIMSkoef3xAhgfHs4MPBEKL3iogmQ6ztkf4Oo"] {
  userMessage: 'Error while resolving signing key for kid "fF4Y61fIMSkoef3xAhgfHs4MPBEKL3iogmQ6ztkf4Oo"',
  jwtString: 'eyJraWQiOiJmRjRZNjFmSU1Ta29lZjN4QWhnZkhzNE1QQkVLTDNpb2dtUTZ6dGtmNE9vIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjl2RWJBWDhnVzZKWWRKMkwwQWstTDExaG1Da0VoS2lGUEx4RW9FX3g0N2sub2FyMmhxcWdidmRuZlk0bE8yOTciLCJpc3MiOiJodHRwczovL2ltcGwuaWRwLmlkbS5jbXMuZ292L29hdXRoMi9hdXM0aXdyOWltWkxzNFViQTI5NyIsImF1ZCI6Im5vdml0YXMiLCJpYXQiOjE3Mjg5MjQ5MjEsImV4cCI6MTcyODkyNjcyMSwiY2lkIjoiMG9hNGl3cmZlbU9xNndYN0kyOTciLCJ1aWQiOiIwMHU4bGVldTNwT2JieXA1TTI5NyIsInNjcCI6WyJvZmZsaW5lX2FjY2VzcyIsIm9wZW5pZCIsImVtYWlsIiwicHJvZmlsZSJdLCJhdXRoX3RpbWUiOjE3Mjg5MjQ5MjAsInN1YiI6ImhzYW50YTIxIiwiY21zUm9sZXMiOiJuc2ktZW5kdXNlciJ9.NjknuqasOprzH9LsHDClwappja-PSt74bfqR-WlhkWo4Vn_hh8MgdRSDl6ODlsFunEZQn8vSfTG2IpdBsuw_XJ9Xb_ydVro7mzwlPtJCCBwkJhu_VQHRbIpWiM8QBTFTMlySO7I2uFXiMxu-xTJlQ5rvjJoklhD-d81k4D-LVdX-yQJ5xvjmRbZ3rILaQyaK4yWtFmpidxDqYGuq_IgzB4NiwMDcMkYdLitHIvKP11Mja60xZr6-YRioko8FqzaxnCaJxY2tbCh431XzXNa0g0uc65N3tPSdTx9BA8aayuUJ7IJC7SOzCoPwoexLZ3SZAsU2tlKMkH97mmuZpB66mA',
  parsedHeader: JwtHeader {
    typ: undefined,
    alg: 'RS256',
    kid: 'fF4Y61fIMSkoef3xAhgfHs4MPBEKL3iogmQ6ztkf4Oo'
  },
  parsedBody: JwtBody {
    ver: 1,
    jti: 'AT.9vEbAX8gW6JYdJ2L0Ak-L11hmCkEhKiFPLxEoE_x47k.oar2hqqgbvdnfY4lO297',
    iss: 'https://impl.idp.idm.cms.gov/oauth2/aus4iwr9imZLs4UbA297',
    aud: 'novitas',
    iat: 1728924921,
    exp: 1728926721,
    cid: '0oa4iwrfemOq6wX7I297',
    uid: '00u8leeu3pObbyp5M297',
    scp: [ 'offline_access', 'openid', 'email', 'profile' ],
    auth_time: 1728924920,
    sub: 'hsanta21',
    cmsRoles: 'nsi-enduser'
  },
  innerError: Error: write EPROTO C008033FF67F0000:error:1C8000E9:Provider routines:kdf_tls1_prf_derive:ems not enabled:providers/implementations/kdfs/tls1_prf.c:200:
  
      at WriteWrap.onWriteComplete [as oncomplete] (node:internal/stream_base_commons:95:16)
      at WriteWrap.callbackTrampoline (node:internal/async_hooks:130:17) {
    errno: -71,
    code: 'EPROTO',
    syscall: 'write'
  }
}

